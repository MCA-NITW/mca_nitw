name: Auto-merge bot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}
  # Manual trigger to check all existing PRs
  workflow_dispatch:

jobs:
  auto-merge:
    name: Auto-merge bot PRs
    runs-on: ubuntu-latest
    
    # Only run if the PR is from dependabot or renovate
    if: |
      github.actor == 'dependabot[bot]' || 
      github.actor == 'renovate[bot]' ||
      github.actor == 'dependabot-preview[bot]'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check PR status
        id: pr-status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            console.log('PR State:', pullRequest.state);
            console.log('PR Mergeable:', pullRequest.mergeable);
            console.log('PR Draft:', pullRequest.draft);
            
            // Check if PR is ready to merge
            if (pullRequest.state !== 'open' || pullRequest.draft) {
              core.setOutput('ready', 'false');
              return;
            }
            
            // Get all status checks
            const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pullRequest.head.sha
            });
            
            console.log('Status checks state:', statusChecks.state);
            
            // Get check runs
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pullRequest.head.sha
            });
            
            console.log('Check runs:', checkRuns.check_runs.map(run => ({ name: run.name, status: run.status, conclusion: run.conclusion })));
            
            // Check if all status checks pass
            const allStatusChecksPassed = statusChecks.state === 'success' || statusChecks.state === 'pending';
            
            // Check if all check runs are completed and successful
            const allCheckRunsPassed = checkRuns.check_runs.every(run => 
              run.status === 'completed' && 
              (run.conclusion === 'success' || run.conclusion === 'neutral' || run.conclusion === 'skipped')
            );
            
            const ready = pullRequest.mergeable && (allStatusChecksPassed || checkRuns.check_runs.length === 0) && allCheckRunsPassed;
            
            console.log('Ready to merge:', ready);
            core.setOutput('ready', ready.toString());
            core.setOutput('pr_number', context.issue.number);

      - name: Wait for checks to complete
        if: steps.pr-status.outputs.ready == 'false'
        run: |
          echo "PR is not ready to merge yet. Checks may still be running."
          exit 0

      - name: Enable auto-merge
        if: steps.pr-status.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-status.outputs.pr_number }};
            
            try {
              // Enable auto-merge with squash merge
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'Auto-approving bot PR'
              });
              
              // Enable auto-merge
              await github.rest.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });
              
              console.log(`Auto-merge enabled for PR #${prNumber}`);
              
            } catch (error) {
              console.log('Error enabling auto-merge:', error.message);
              
              // Fallback: try to merge directly if auto-merge is not available
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  merge_method: 'squash',
                  commit_title: `Auto-merge bot PR #${prNumber}`,
                  commit_message: 'Automatically merged by GitHub Actions'
                });
                
                console.log(`Successfully merged PR #${prNumber}`);
              } catch (mergeError) {
                console.log('Error merging PR:', mergeError.message);
                core.setFailed(`Failed to merge PR: ${mergeError.message}`);
              }
            }

  # Separate job to handle check completion events
  check-and-merge:
    name: Check and merge on status update
    runs-on: ubuntu-latest
    
    # Only run on check completion or status events from bot PRs
    if: |
      (github.event_name == 'check_suite' || github.event_name == 'status') &&
      (
        github.event.pull_requests[0].user.login == 'dependabot[bot]' || 
        github.event.pull_requests[0].user.login == 'renovate[bot]' ||
        github.event.pull_requests[0].user.login == 'dependabot-preview[bot]'
      )
    
    steps:
      - name: Find and merge ready bot PRs
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open PRs from bots
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const botPRs = pullRequests.filter(pr => 
              pr.user.login === 'dependabot[bot]' || 
              pr.user.login === 'renovate[bot]' ||
              pr.user.login === 'dependabot-preview[bot]'
            );
            
            console.log(`Found ${botPRs.length} bot PRs`);
            
            for (const pr of botPRs) {
              console.log(`Checking PR #${pr.number}`);
              
              if (pr.draft || !pr.mergeable) {
                console.log(`PR #${pr.number} is not ready (draft: ${pr.draft}, mergeable: ${pr.mergeable})`);
                continue;
              }
              
              // Check status
              const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              // Get check runs
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              const allStatusChecksPassed = statusChecks.state === 'success';
              const allCheckRunsPassed = checkRuns.check_runs.every(run => 
                run.status === 'completed' && 
                (run.conclusion === 'success' || run.conclusion === 'neutral' || run.conclusion === 'skipped')
              );
              
              if (allStatusChecksPassed && (allCheckRunsPassed || checkRuns.check_runs.length === 0)) {
                console.log(`PR #${pr.number} is ready to merge`);
                
                try {
                  // Approve the PR
                  await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    event: 'APPROVE',
                    body: 'Auto-approving bot PR after successful checks'
                  });
                  
                  // Merge the PR
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: 'squash',
                    commit_title: `Auto-merge bot PR #${pr.number}`,
                    commit_message: 'Automatically merged by GitHub Actions after successful checks'
                  });
                  
                  console.log(`Successfully merged PR #${pr.number}`);
                  
                } catch (error) {
                  console.log(`Error merging PR #${pr.number}:`, error.message);
                }
              } else {
                console.log(`PR #${pr.number} checks not ready (status: ${statusChecks.state}, check runs passed: ${allCheckRunsPassed})`);
              }
            }

  # Job to scan all existing bot PRs (manual trigger only)
  scan-all-bot-prs:
    name: Scan all existing bot PRs
    runs-on: ubuntu-latest
    
    # Only run on manual trigger
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Scan and merge all ready bot PRs
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Starting scan of all existing bot PRs...');
            
            // Get all open PRs from bots
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            const botPRs = pullRequests.filter(pr => 
              pr.user.login === 'dependabot[bot]' || 
              pr.user.login === 'renovate[bot]' ||
              pr.user.login === 'dependabot-preview[bot]'
            );
            
            console.log(`Found ${botPRs.length} bot PRs to check`);
            
            if (botPRs.length === 0) {
              console.log('No bot PRs found to process');
              return;
            }
            
            let mergedCount = 0;
            let skippedCount = 0;
            
            for (const pr of botPRs) {
              console.log(`\n--- Checking PR #${pr.number}: ${pr.title} ---`);
              
              if (pr.draft) {
                console.log(`PR #${pr.number} is a draft, skipping`);
                skippedCount++;
                continue;
              }
              
              // Get detailed PR info to check mergeable status
              const { data: detailedPR } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              if (!detailedPR.mergeable) {
                console.log(`PR #${pr.number} is not mergeable, skipping`);
                skippedCount++;
                continue;
              }
              
              // Check status checks
              const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              // Get check runs
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              console.log(`Status checks: ${statusChecks.state}`);
              console.log(`Check runs: ${checkRuns.check_runs.length} total`);
              
              const allStatusChecksPassed = statusChecks.state === 'success';
              const allCheckRunsPassed = checkRuns.check_runs.length === 0 || 
                checkRuns.check_runs.every(run => 
                  run.status === 'completed' && 
                  (run.conclusion === 'success' || run.conclusion === 'neutral' || run.conclusion === 'skipped')
                );
              
              console.log(`Status checks passed: ${allStatusChecksPassed}`);
              console.log(`Check runs passed: ${allCheckRunsPassed}`);
              
              if (allStatusChecksPassed && allCheckRunsPassed) {
                console.log(`PR #${pr.number} is ready to merge!`);
                
                try {
                  // Check if PR already has approving reviews
                  const { data: reviews } = await github.rest.pulls.listReviews({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number
                  });
                  
                  const hasApproval = reviews.some(review => review.state === 'APPROVED');
                  
                  if (!hasApproval) {
                    // Approve the PR
                    await github.rest.pulls.createReview({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: pr.number,
                      event: 'APPROVE',
                      body: 'Auto-approving bot PR during scheduled scan'
                    });
                    console.log(`Approved PR #${pr.number}`);
                  } else {
                    console.log(`PR #${pr.number} already has approval`);
                  }
                  
                  // Merge the PR
                  const mergeResult = await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: 'squash',
                    commit_title: `Auto-merge bot PR #${pr.number}`,
                    commit_message: 'Automatically merged by GitHub Actions during scheduled scan'
                  });
                  
                  console.log(`✅ Successfully merged PR #${pr.number}`);
                  mergedCount++;
                  
                } catch (error) {
                  console.log(`❌ Error processing PR #${pr.number}:`, error.message);
                  skippedCount++;
                }
              } else {
                console.log(`PR #${pr.number} is not ready yet`);
                skippedCount++;
              }
              
              // Add a small delay to avoid rate limiting
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            console.log(`\n=== Summary ===`);
            console.log(`Total bot PRs found: ${botPRs.length}`);
            console.log(`Successfully merged: ${mergedCount}`);
            console.log(`Skipped (not ready): ${skippedCount}`);
            
            if (mergedCount > 0) {
              console.log(`🎉 Merged ${mergedCount} bot PR(s) successfully!`);
            }
