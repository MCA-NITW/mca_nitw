name: Main Branch Linting ,Testing and SonarQube Scan

on:
  # use Push if you want to trigger the workflow on every push to the repository in the main branch
  pull_request:
  # use workflow_dispatch if you want to trigger the workflow manually
  workflow_dispatch:

env:
  # Name Branch as per you working on
  BRANCH_NAME: ${{ github.ref_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Set up Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

  # Lint and format code with Prettier, ESLint and Stylelint
  lint-and-format:
    runs-on: ubuntu-latest
    needs: [setup-node]
    steps:

      - name: Checkout code repository
        uses: actions/checkout@v3

      # Install dependencies
      - name: Install dependencies
        run: |
          yarn install

      # Check for changes with ESLint and Stylelint
      - name: Analyzing the code with ESLint and Stylelint
        run: |
          yarn eslint --fix .
          yarn stylelint --fix .

      # Check for changes with Prettier
      - name: Check for changes with Prettier
        id: prettier-check
        run: |
          if yarn prettier --check **/*.js **/*.jsx **/*.css ; then
            echo "PRETTIER_CHECK_RESULT=success" >> $GITHUB_ENV
          else
            echo "PRETTIER_CHECK_RESULT=failure" >> $GITHUB_ENV
          fi

      # if Prettier check fails, format code with Prettier and create a PR
      - name: Format code with Prettier
        if: env.PRETTIER_CHECK_RESULT == 'failure'
        run: |
          git checkout -b ${{env.BRANCH_NAME}}-prettier-formatting
          yarn prettier --write **/*.js **/*.jsx **/*.css

      # if Prettier check fails, add changes to git and push to remote branch and create a PR
      - name: Add changes to git and push to remote branch and create a PR
        if: env.PRETTIER_CHECK_RESULT == 'failure'
        run: |
          git config --local user.email ${{ github.actor }}@users.noreply.github.com
          git config --local user.name ${{ github.actor }}
          git add .
          git commit -m "Automatic code formatting with Prettier"
          git push origin ${{env.BRANCH_NAME}}-prettier-formatting --force
          gh pr create --title "Format code with Prettier" --body "This PR is auto-generated by GitHub Actions" --base "${{ github.ref }}" --head ${{env.BRANCH_NAME}}-prettier-formatting --repo ${{ github.repository }}
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}

  # Run tests and generate code coverage report
  testing-and-code-coverage:
    runs-on: ubuntu-latest
    needs: lint-and-format
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      # Install Jest package for testing
      - name: Install jest package
        run: |
          yarn add jest --dev

      # Install SonarQube Scanner package for code coverage
      - name: Generate coverage report in XML format and move to artifacts directory
        run: |
          yarn jest --coverageReporters="cobertura"
          mv coverage/cobertura-coverage.xml coverage.xml

      # Upload coverage report as artifact
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml

  # SonarQube scan to analyze code quality
  sonarCloud-scan:
    needs: testing-and-code-coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Download coverage artifact
      - name: Download coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: coverage-report
      
      # Sonar Cloud Scan
      - name: Sonar Cloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/coverage/**,**/build/**
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*.test.js,**/*.test.jsx
            -Dsonar.test.exclusions=**/node_modules/**

      